// Generated by Dagger (https://dagger.dev).
package com.example.spaTi.di;

import com.example.spaTi.data.repository.AuthRepository;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepositoryModule_ProvideAutghRepositoryFactory implements Factory<AuthRepository> {
  private final Provider<FirebaseFirestore> databaseProvider;

  private final Provider<FirebaseAuth> authProvider;

  public RepositoryModule_ProvideAutghRepositoryFactory(
      Provider<FirebaseFirestore> databaseProvider, Provider<FirebaseAuth> authProvider) {
    this.databaseProvider = databaseProvider;
    this.authProvider = authProvider;
  }

  @Override
  public AuthRepository get() {
    return provideAutghRepository(databaseProvider.get(), authProvider.get());
  }

  public static RepositoryModule_ProvideAutghRepositoryFactory create(
      Provider<FirebaseFirestore> databaseProvider, Provider<FirebaseAuth> authProvider) {
    return new RepositoryModule_ProvideAutghRepositoryFactory(databaseProvider, authProvider);
  }

  public static AuthRepository provideAutghRepository(FirebaseFirestore database,
      FirebaseAuth auth) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideAutghRepository(database, auth));
  }
}
