// Generated by Dagger (https://dagger.dev).
package com.example.spaTi.di;

import com.example.spaTi.data.repository.NoteRepository;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepositoryModule_ProvideNoteRepositoryFactory implements Factory<NoteRepository> {
  private final Provider<FirebaseFirestore> databaseProvider;

  public RepositoryModule_ProvideNoteRepositoryFactory(
      Provider<FirebaseFirestore> databaseProvider) {
    this.databaseProvider = databaseProvider;
  }

  @Override
  public NoteRepository get() {
    return provideNoteRepository(databaseProvider.get());
  }

  public static RepositoryModule_ProvideNoteRepositoryFactory create(
      Provider<FirebaseFirestore> databaseProvider) {
    return new RepositoryModule_ProvideNoteRepositoryFactory(databaseProvider);
  }

  public static NoteRepository provideNoteRepository(FirebaseFirestore database) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideNoteRepository(database));
  }
}
